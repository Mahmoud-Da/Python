*** 1- Variables ***

- variable is one of the core concept of programming
we use variable to store data in computer memory

ex:
- define a variable called students_count and set to 1000
-------------------code----------------------
students_count = 1000
-------------------code----------------------

- when run this program python Interpreter will allocate some memory and store the number 
1000 in that memory space .
then it have "students_count" variable to reference that memory location.
so "students_count" variable is just a label for the memory location

- we can use this label or this variable anywhere in our program to get access to that memory
location and the data which store there

- if we print the "students_count" and run our program we will get the number of "1000" 
-------------------code----------------------
students_count = 1000
print(students_count)
=> 1000
-------------------code----------------------

what type of data we can store in computer memory?
it what we called primitive types:
- number => we refer it as "integer" in programming
- string => like text 
- boolean => "True" or "False" like yes or no in english

- number example
normal number 
-------------------code----------------------
students_count = 1000
-------------------code----------------------

decimal number => we call it in programming "float" 
-------------------code----------------------
rating = 4.99
-------------------code----------------------

- boolean
used to make decisions ex: if the user is admin we want to give it more privileges
-------------------code----------------------
is_published = True
-------------------code----------------------

-------------------code----------------------
is_published = False
-------------------code----------------------

PS: Python is "case sensitive language" which means lower case and upper case has 
different meanings 
so boolean values should always start with capital letter
so if we type "false" or "FALSE" this will not be accepted boolean values

string
where ever working with text in programming we should add quotation
-------------------code----------------------
course_name = "Python Programming language"
-------------------code----------------------

*** 2- Variable Names ***

our variable from the pervious lesson
-------------------code----------------------
students_count = 1000
rating = 4.99
is_published = True
course_name = "Python Programming language"
print(students_count)
-------------------code----------------------

1- all our variable are descriptive and meaningful
ex: 
- students_count
represent the number of the students in the course 

- course_name
this variable is name is also mean that this variable hold the name of the course

some of mistake of beginners is using mystical name for there Variables
example: 
- cn
as short of course name  

- when someone else read this code they will have no idea what "cn" means 
or using like "c1" when locking for that name the other developer will wonder where is 
"c2" and what is the difference between "c1" and "c2" and that is bad practice.

- there is sometimes when we use variable name like "x", "y", "z" if we are dealing 
with coordinates so that an exception


2- using lower case letters to name the variables
-------------------code----------------------
course_name => OK
Course_Name => NG
COURSE_NAME => NG
-------------------code----------------------


3- using "_" to separate multiple words
in python we can't have space in variable names 
and if we avoid using "_" it will be hard to read 

4- add space between between the value and variable and
without space we called dirty code or stink 
-------------------code----------------------
is_published=True
-------------------code----------------------

the code should be readable so that we have linters like "pep8" 
and cause we set pip8 as extension if we forget this rules it will automatically
be fixed cause "format on save" feature

but is better to give our self a habit to write clean code without relaying on the tools

*** 3- Strings ***
where we works with string we should surround them with double quotation or single quotation
but more often we use double quotation
-------------------code----------------------
course = "Python Programming"
-------------------code----------------------  
or 
-------------------code----------------------
course = 'Python Programming'
-------------------code----------------------

- we have also triple quotation to format long string
-------------------code----------------------
message = """
Hi Moody

This Moody form Tech department

Blah blah blah
"""
-------------------code----------------------

- useful things we can do with strings

we have built in function in Python to get the length of string called "len"

What is function?
function is basically a reusable piece of code  that carries out a task.
we give an example a TV remote controller 

- len function:
to get the length of string, which means the number of characters in that string.

- wherever we use function we should use parenthesis
now we say we are calling this function, which basically means
we are using this function
-------------------code----------------------
len()
-------------------code----------------------

- now some functions take additional data, which we refer to as arguments
arguments: are the inputs of these functions.

so we pass course as argument to the function
-------------------code----------------------
len(course)
-------------------code----------------------

then we print it to show the result
-------------------code----------------------
print(len(course))
=> 18
-------------------code----------------------
*********************************************************************************
1. Parameters:
Parameters are the variables that are defined in a function's declaration. They act as placeholders for the values that will be passed to the function when it is called.
For example, in the function definition def add(a, b):, a and b are parameters.
Arguments:
Arguments are the actual values that are passed to the function when it is called. They replace the parameters in the function definition.
For example, in the function call add(5, 3), the values 5 and 3 are the arguments.

Example
Hereâ€™s a simple example to illustrate the difference:
-------------------code----------------------
def greet(name):  # 'name' is a parameter
    print(f"Hello, {name}!")

greet("Alice")  # "Alice" is an argument
-------------------code----------------------
*********************************************************************************


- if we want to access to a specific character
we use square brackets notation
to get the first character we use the index 0
-------------------code----------------------
course[0]
-------------------code----------------------

so Python like many other programming languages 
strings are 0 index, which means the index of the first character 
or the first element is 0.

we print it to see the result
-------------------code----------------------
print(course[0])
=> P
-------------------code----------------------

- also we can use negative index, like minus 
0 => represent the first character
-1 => represent the last character
-------------------code----------------------
print(course[-1])
=> g
-------------------code----------------------

- using similar syntax we can slice strings.
let's say we want to extract the first 3 characters
we will use semi column 
[start_index:end_index]
-------------------code----------------------
print(course[0:3])
=> Pyt
-------------------code----------------------

index[0] => "P"
index[1] => "y"
index[2] => "t"

which means the last index which is "3" is not included


- what if we didn't set the end_index 
we will start from the first index until the end
=> which means we will have the same original string
-------------------code----------------------
print(course[0:])
=> Python Programming
-------------------code----------------------

- what if didn't include the start index and instead we include
only the end index
we will start from the first letter until the pervious number 
of the last index 
-------------------code----------------------
print(course[:3])
=> Pyt
-------------------code----------------------

- and finally without adding and index number we will have copy
from the original index
-------------------code----------------------
print(course[:])
=> Python Programming
-------------------code----------------------

- we only have to remember only we can add index to access character
and len to have length of that characters and ":" to slice the character

*** 4- Escape Sequences ***
let's say we want to add double quotation inside our string
-------------------code----------------------
course = "Python "Programming"
-------------------code----------------------

- we have problem cause the Python Interpreter sees the second string as the end of
the string and the rest of the code are meaningless and invalid


how to solve this problem?
there is two ways:
1- use single quotation and then we can use double quotation in our string
-------------------code----------------------
course = 'Python "Programming'
-------------------code----------------------

2- we can still using double quotation if we prefix our middle quotation with 
back slash 
-------------------code----------------------
course = "Python \"Programming"
-------------------code----------------------

- back slash in Python string are special character we used to escape the character after it
we don't have the "\" char cause we used it to escape the double code
-------------------code----------------------
course = "Python \"Programming"
print(course)
=> Python "Programming
-------------------code----------------------

- back slash [\] is escape character
- [\"] is escape Sequences
there is few other escape sequences to be aware of 

for example:
- we have "#" to indicate a comment 
comment: additional note that we add to our program, and it's not executed by the Interpreter
-------------------code----------------------
# course = "Python "Programming"
-------------------code----------------------

- we have [\'] to include single quotation 
-------------------code----------------------
course = "Python \'Programming"
print(course)
=> Python 'Programming
-------------------code----------------------

- we have [\\] to include backslash quotation
-------------------code----------------------
course = "Python \\Programming"
print(course)
=> Python \Programming
-------------------code----------------------

- we have [\n] to include new line 
-------------------code----------------------
course = "Python \nProgramming"
print(course)
=> Python 
Programming
-------------------code----------------------

*** 5- Formatted Strings ***
we have first and last name and lest say we want to print
the full name on the console
-------------------code----------------------
first = "Moody"
last = "Lili"
-------------------code----------------------

-  we can concatenate it with last
-------------------code----------------------
full = first + " " + last
print(full) 
-------------------code----------------------

- there is better approach by using formatted string
we can prefix it with f which can be lower case or upper case

- this formatted string doesn't have constant and it will evaluated at the 
run time

- and we should use curly braces for the variable
at run time this expression  f"{first} {last}" will evaluated
what we have in curly braces will be replaced
-------------------code----------------------
full = f"{first} {last}"
print(full)
=> Moody Lili
-------------------code----------------------

- be aware that we can use any exception in between curly braces
like we can call the len built in function
-------------------code----------------------
full = f"{len(first)} {2 + 2}"
print(full)
=> 5 4
-------------------code----------------------

so when we use formatted string we can put any valid expression
in between curly braces

*** 6- String Methods ***
- we will lock on multiple function that useful for strings 

- len method that we studied earlier is general purpose and not limited 
to strings, later we will see how to use it with another object
in Python we have quite a few functions that are specific to strings
if type 
-------------------code----------------------
course.
-------------------code----------------------

- we can see all the functions available on strings.in precise terms we 
refer to these functions as "methods"
this is a term in object oriented programming that we learn about it later

- for now what we want to take away is that everything in python is an object
and objects have functions we call methods that we can access using the dot notation.

- upper()
to convert string to upper case
-------------------code----------------------
course = 'Python Programming'
print(course.upper())
=> PYTHON PROGRAMMING
-------------------code----------------------

this method return a new string so the original string is not effected
course = 'Python Programming'
-------------------code----------------------
course = 'Python Programming'
print(course.upper())
print(course)
=> PYTHON PROGRAMMING
   Python Programming
-------------------code----------------------

- so course.upper() return a new string and a new value we can store it 
-------------------code----------------------
course_capital = course.upper()
print(course_capital)
-------------------code----------------------

- lower()
to convert string to lower case

- title()
which capital the first letter of every word
-------------------code----------------------
course = "python programming"
print(course.title())
=> Python Programming
-------------------code----------------------

- strip()
we use it when to trim any white space at the beginning or end of a string.
so it remove the white space from the beginning and the end of a string
this is particularly useful when receive info from the user.
-------------------code----------------------
course = "  python programming"
print(course.strip())
=> python programming
-------------------code----------------------

- rstrip()
shortcut for right strip only remove the white space from the end of string
-------------------code----------------------
course = "python programming  "
print(course.rstrip())
=> python programming
-------------------code----------------------

- lstrip()
shortcut for left strip only remove the white space from the start of string
-------------------code----------------------
course = "  python programming"
print(course.lstrip())
-------------------code----------------------

- find()
to get the index of the character or sequences of characters in a string.
-------------------code----------------------
course = "python programming"
print(course.find("pro"))
=> 7
-------------------code----------------------

when working with character we get the index of the first character
-------------------code----------------------
course = "python programming"
print(course.find("p"))
=> 0
-------------------code----------------------

when we don't find the character we got -1
which this string in was not found in the original string
-------------------code----------------------
course = "python programming"
print(course.find("Pro"))
=> -1
-------------------code----------------------

- replace()
we can replace the a character or sequences of characters in a string with something else.

replace(old, new)
-------------------code----------------------
course = "python programming"
print(course.replace("pro", "Pro"))
=> python Programming
-------------------code----------------------

- in operator
check for the existing of character or sequences of characters in a string.
PS: the difference between in operator and find method is the returning value
in => boolean
find() => number(of index)
-------------------code----------------------
course = "python programming"
print("pro" in course)
=> True
-------------------code----------------------

- not operator
check if our string contains character or sequences of characters.
-------------------code----------------------
course = "python programming"
print("pro" not in course)
=> False
-------------------code----------------------

*** 7- Numbers ***
in Python we have 3 types of numbers 

integer => normal number
float => decimal number 
complex => a + bi (where i is the imaginary number) but instead of "i" we use "j"
-------------------code----------------------
# integer
x = 1
# float
x = 1.1
# complex
x = 1 + 2j
-------------------code----------------------

- for all this type number we have standard arithmetic operations 
that we we have in math

"+" => addition
"-" => subtraction
"*" => multiplication
"/" => division float number
"//" => division float number
"%" {modulus} => reminder number of the division
"**" {exponent} => left to the power of right
-------------------code----------------------
print(10 + 3)
=> 13
print(10 - 3)
=> 7
print(10 * 3)
=> 30
print(10 / 3)
=> 3.3333333333333335
print(10 // 3)
=> 3
print(10 % 3)
=> 1
print(10 ** 3)
=> 1000
-------------------code----------------------

- for all this operator we have special operator called "augmented operator"
if we have 
-------------------code----------------------
x = 10
-------------------code----------------------

and want to increment it by 3
-------------------code----------------------
x = 10
x = x + 3
print(x)
=> 13
-------------------code----------------------

- or we can use shorter way "augmented assignment operator"
-------------------code----------------------
x = 10
x += 3
print(x)
=> 13
-------------------code----------------------

we can use subtraction and multiple and so 

*** 8- Working with Numbers ***

some useful number functions 

- round()
rounding a number
-------------------code----------------------
print(round(2.9))
=> 3
-------------------code----------------------

- abs()
return the absolute value of a number.
-------------------code----------------------
print(abs(-2.5))
=> 2.5
-------------------code----------------------

- we only have handful of built in functions to works with numbers
but if we want to work with complex mathematical calculations 
we need to use the math module

module: separate file with some python code.
so in python we math module which includes a lot of mathematical functions to work with numbers

to use a module in our file we need to import at the top of the file first
-------------------code----------------------
import math
-------------------code----------------------

now math in our program is an object so we can use a dot notation to see
all the functions, more accurately all the methods available in this object.

as example we have math.ceil() to get the ceiling of number 

-------------------code----------------------
import math

print(math.ceil(2.2))
=> 3
-------------------code----------------------

to find the complete list of math function we go to google and lock for 
-------------------code----------------------
python3 math module
-------------------code----------------------
and access to 
-------------------code----------------------
https://docs.python.org/3/library/math.html
-------------------code----------------------

*** 9- Type Conversion ***

-input() 
to get the input of the user as argument we pass "" and this will 
be a label that will be displayed on the terminal

PS: run the program in terminal without using runner cause 
runner run the program only on read mode

-------------------code----------------------
x = input("x: ")
y = x + 1
=> python3 app9.py
x: 1
Traceback (most recent call last):
  File "Python/Complete-Python-Mastery/2-Primitive-Types/app9.py", line 2, in <module>
    y = x + 1
        ~~^~~
TypeError: can only concatenate str (not "int") to str
-------------------code----------------------

- we got TypeError why?
when receive input from the user. this input always comes as string.

so our expression at runtime will look like this 
-------------------code----------------------
y = "1" + 1
-------------------code----------------------

- "1" is different from number 1 cause these are two different types.
when Python Interpreter sees this expression it doesn't know what to do.
cause two objects can't be concatenated if they are from different type

-  so we need to convert the type of "1" which string to number 
in python we have multi built in functions for type Conversion
-------------------code----------------------
int(x) => convert to integer
float(x) => convert to decimal
bool(x) => convert to boolean
str(x) => convert to string
type() => to check the type
-------------------code----------------------


- now to check the type of "x" in our program we use print
PS: we comment the error line
-------------------code----------------------
x = input("x: ")
print(type(x))
# y = x + 1
=>  python3 app9.py
x: 2
<class 'str'>
-------------------code----------------------

- now to fix the problem we need to convert "x" to integer
-------------------code----------------------
x = input("x: ")
y = int(x) + 1
print(f"x: {x}, y: {y}")
=> python3 app9.py
x: 2
x: 2, y: 3
-------------------code----------------------

- now all the conversion built it functions are self explanatory 
the only tricky one is the "bool()"

cause in Python we have concept of truthy and falsy values, these values that are not exactly
the boolean true or false, but they can be Interpreted as a boolean true or false.
PS: None represent the absent of value 
-------------------code----------------------
# Falsy
""
0
None

# Truthy
anything else
-------------------code----------------------

example
-------------------code----------------------
print(bool(0))
=> False
print(bool("test"))
=> True
print(bool("False")) # cause is string
=> True
-------------------code----------------------

*** 10- Quiz ***

1- what are the primitive types in Python
2- what we will see in terminal when we print 
-------------------code----------------------
fruit = "Apple"
print(fruit[1])
-------------------code----------------------
and
-------------------code----------------------
print(fruit[1:-1])
-------------------code----------------------
3- what is the result of 
-------------------code----------------------
10 % 3
-------------------code----------------------
4- what is the result of 
-------------------code----------------------
print(bool("False"))
-------------------code----------------------
