*** 1- Comparison Operators ***

we use Comparison Operators to compare values and the result
of it boolean expression.


-------------------code----------------------
>>> 10 > 3
True
>>> 10 >= 3
True
>>> 10 < 20
True
>>> 10 <= 20
True
>>> 10 == 10
True
-------------------code----------------------

how about 
we get False cause this values is different types and stored in different
location in the memory
-------------------code----------------------
>>> 10 == "10"
False
-------------------code----------------------

finally we have the "!" not equal operation
-------------------code----------------------
>>> 10 != "10"
True
-------------------code----------------------

- we can also use comparison operators with strings
cause when we sort these two words bag comes after so it considered greater
-------------------code----------------------
>>> "bag" > "apple"
True
-------------------code----------------------

- when comparison equality between lower case and upper case of the word 
we have false cause every character has numeric presentation in programming

-------------------code----------------------
>>> "bag" == "BAG"
False
-------------------code----------------------

to check the numeric presentation of character we can use ord() method
-------------------code----------------------
>>> ord("b")
98
>>> ord("B")
66
>>> "bag" > "BAG"
True
-------------------code----------------------

*** 2- Conditional Statements ***

in every programming language there is time when we want to make 
a decision and here where we use if Statement.

let's say we have a temperature variable and depends on the value we want to show 
message to user.

we use "if" and after it we add statement which basically a boolean expression produce
a boolean value.

if that expression evaluated to true the follow expression will be executed.
PS: when we use if statement we should always terminate our expression with ":"
-------------------code----------------------
temperature = 37
if temperature > 30:
  => cursor is indented automatically to two white spaces
    and this indent is very important so the Python interpreter which
    statement to execute if the condition is true
-------------------code----------------------

- we can have multi statement unless this statement belong to the 
indented of the if block
PS: when we save the file pip8 indent 4white spaces cause that what it
redemanded
-------------------code----------------------
temperature = 37
if temperature > 30:
    print("it's worm")
    print("Drink water")
-------------------code----------------------

- finally the Done statement will be execute where ever 
the condition is True or False cause
the indented is not belong the if statement 
-------------------code----------------------
temperature = 37
if temperature > 30:
    print("it's worm")
    print("Drink water")
print("Done")

=> it's worm
Drink water
Done
-------------------code----------------------

when we change the temperature
-------------------code----------------------
temperature = 15
if temperature > 30:
    print("it's worm")
    print("Drink water")
print("Done")
=> Done
-------------------code----------------------

- what if want to have multi conditions we use "elif" and that is shortcut 
to "else if "
PS: we can has as many as elif statement as we want
-------------------code----------------------
temperature = 21
if temperature > 30:
    print("it's worm")
    print("Drink water")
elif temperature > 20:
    print("it's nice")
print("Done")
=> it's nice
   Done
-------------------code----------------------

- we can have also "else" which means if not of the conditions are True
-------------------code----------------------
temperature = 15
if temperature > 30:
    print("it's worm")
    print("Drink water")
elif temperature > 20:
    print("it's nice")
else:
    print("it's cold")
print("Done")
=> it's cold
 Done
-------------------code----------------------

*** 3- Ternary Operator ***
in this lesson we will see a technique to how to write a clean code 
lt's say we are building an application for an university and we want to check if 
the person who apply to this university is eligible or not.
-------------------code----------------------
age = 21
if age >= 18:
    print("Eligible")
else:
    print("not Eligible")
# Eligible
-------------------code----------------------

- now there is nothing wrong with this code but we will see a cleaner way 
to achieve the same result.

step1: instead of having multi print methods we can define a variable we 
called "message" and set to value depends on condition
-------------------code----------------------
age = 21
if age >= 18:
    message = "Eligible"
else:
    message = "not Eligible"
print(message)

# Eligible
-------------------code----------------------

step2: when we have an if else statement with this structure where we assign
value to a variable we can rewrite it in simpler way
that what we called "Ternary Operator"
-------------------code----------------------
age = 21
message = "Eligible" if age >= 18 else "not Eligible"
print(message)
-------------------code----------------------

*** 4- Logical Operators ***
in Python we have 3 Logical operators and we use to module more complex 
conditions
"and": if both conditions are true => True
"or": if one of the conditions at least is true => True
"not": inverse the value if the boolean if not the condition => True

imagine we building application for processing loans 
we have high_income and high_credit and if this two values are true 
the client will be eligible
-------------------code----------------------
high_income = True
good_credit = True
if high_income and good_credit:
    print("Eligible")
=> Eligible
-------------------code----------------------

PS: we didn't use ==True cause high_credit and good_credit is already boolean
so we didn't write like
-------------------code----------------------
if high_income == True and good_credit == True:
    print("Eligible")
-------------------code----------------------

- if one of the condition is false 
-------------------code----------------------
high_income = False
good_credit = True
if high_income and good_credit:
    print("Eligible")
else:
    print("not Eligible")
=> not Eligible
-------------------code----------------------

- using "or"
-------------------code----------------------
high_income = False
good_credit = True
if high_income or good_credit:
    print("Eligible")
else:
    print("not Eligible")
=> Eligible
-------------------code----------------------

- using "not"
-------------------code----------------------
is_student = True

if not is_student:
    print("Eligible")
else:
    print("not Eligible")
=> not Eligible
-------------------code----------------------

- high_income or good_credit the client is not a student
-------------------code----------------------
high_income = False
good_credit = True
is_student = False

if (high_income or good_credit) and not is_student:
    print("Eligible")
else:
    print("not Eligible")
=> Eligible
-------------------code----------------------

*** 5- Short-circuit Evaluation ***
whe Python interpreter read this condition in the below 
it start to read it from the left condition by condition and when we 
find the result of condition it stop evaluation 
-------------------code----------------------
if high_income and good_credit and not is_student:
-------------------code----------------------

- so in the code below the Python interpreter start with high_income and when it sees 
the result is false is jump to else immediately and the rest of the condition expression will be meaningless
that what we called Short-circuit
-------------------code----------------------
high_income = False
good_credit = True
is_student = True

if high_income and good_credit and not is_student:
    print("Eligible")
else:
    print("not Eligible")
# not Eligible
-------------------code----------------------

- same with "or" and in this case if it's find True in the if statement
it jumps immediately to the expression to execute
-------------------code----------------------
high_income = False
good_credit = True
is_student = True

if high_income or good_credit or not is_student:
    print("Eligible")
else:
    print("not Eligible")
# not Eligible
-------------------code----------------------

====> in Python the Logical operators are short-circuit

*** 6- Chaining Comparison Operators ***

powerful technique to write a clean code

let's say we want to implement a role says age should be between 18 and 65
-------------------code----------------------
age = 22
if age >= 18 and age < 65:
    print("Eligible")
# Eligible
-------------------code----------------------

- how can write this in math 
=> 18 <= age <= 65 
in Python we can write the same thing and it's more readable
that what we called chaining comparison
-------------------code----------------------
age = 22
if 18 <= age < 65:
    print("Eligible")
# Eligible
-------------------code----------------------

*** 7- Quiz ***

what is result of this code
-------------------code----------------------
if 10 == "10":
    print("a")
elif "bag" > "apple" and "bag" > "cat":
    print("b")
else:
    print("c")
-------------------code----------------------
