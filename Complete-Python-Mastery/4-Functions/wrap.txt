*** 1- Defining Functions ***
So Far we have learned how to use some of the built-in functions in Python such as print round and so on in this section
we're going to learn how to write our own functions now.

- why do we even need to write our own functions?
when we build a real program that program is going to consist hundreds or thousands of lines of code
we shouldn't write all that code in one file like we have done so far
we should break that code into a smaller more maintainable and potentially more reusable "chunks"
we refer to these "chunks" as "functions". 


- how to create our own custom functions?
We start with the "def" keyword which is short for define
Next we need to give our function a name, So let's call this greet.

PS: all the best practices we learned about naming our variables also apply to naming our functions
So make sure our function names are meaningful
Descriptive use lowercase letters to name our functions and an underscore to separate multiple words

Now after the name we need to add
Parenthesis we will see why shortly and then we'll add a colon now what is going to happen?

we know it we're going to get indentation which means the following statements will belong to this function
we add two statements
Both these lines belong to this function because they're indented
-------------------code----------------------
def greet():
    print("Hi there")
    print("Welcome aboard")
-------------------code----------------------

Now we're done with this function. We need to call it
So we remove the indentation and  adding two line breaks after this function This is what pep 8 recommends
to keep our code clean and maintainable.


we call this function greet with parentheses just like how we call the built-in functions.
-------------------code----------------------
def greet():
    print("Hi there")
    print("Welcome aboard")


greet()

=> Hi there
Welcome aboard
-------------------code----------------------

*** 2- Arguments ***
What is the difference between the greet and Print functions?
the difference is that this print function takes an input
Whereas our greet function doesn't take any inputs.

- how to pass inputs like first name and last name to this function.
When defining a function in between parentheses will list our parameters
So here we add two parameters like first underline name and last underline name
Now when calling this function, we need to supply two values for those parameters. We refer to them as arguments
so "Moody Lili" these are the arguments to the greet function
-------------------code----------------------
def greet(first_name, last_name):
    print("Hi there")
    print("Welcome aboard")


greet("Moody", "Lili")
-------------------code----------------------


difference between parameters and arguments.
- parameter: is The input that you define for our function.
- argument: is the actual value for a given parameter.

now instead of saying hi there
We can greet a person by their full name so we can convert it to a formatted string and
Pass two fields here first name as well as last name
-------------------code----------------------
def greet(first_name, last_name):
    print(f"Hi {first_name} {last_name}")
    print("Welcome aboard")


greet("Moody", "Lili")

=> Hi Moody Lili
Welcome aboard
-------------------code----------------------




This function is more useful. We can reuse it and call it with different arguments. 
So let's greet John Smith as well
-------------------code----------------------
def greet(first_name, last_name):
    print(f"Hi {first_name} {last_name}")
    print("Welcome aboard")


greet("Moody", "Lili")
greet("John", "Smith")

=> Hi Moody Lili
Welcome aboard
Hi John Smith
Welcome aboard
-------------------code----------------------

note: by default all the parameters that you define for a function are required
So here our greet function takes two parameters if I exclude one of these arguments and save the changes
You can see we have this red on the line
Spylent is complaining and saying
-------------------code----------------------
No value for argument 'last_name' in function call
-------------------code----------------------

Also, if we run the program we get this 
-------------------code----------------------
Type error greet missing one required positional argument
-------------------code----------------------


*** 3- Types of Functions ***
so this is the simplified version of this great function we created earlier 
-------------------code----------------------
def greet(name):
    print(f"Hi {name}")
-------------------code----------------------


now in programming
we have two types of functions 
1- functions that perform a task
2- functions that calculate and return a Value

both the print and greet functions are examples of type one "functions that perform a task"
the round function is an example of a function that calculates and returns a value so the functions
-------------------code----------------------
print(round(1.9))
=> 2
-------------------code----------------------

how to rewrite great function to be "functions that calculate and return a Value" 
we use the "return statement" keyword
-------------------code----------------------
def get_greeting(name):
    return f"Hi {name}"


get_greeting("Moody")
-------------------code----------------------


- now we can print the value 
-------------------code----------------------
print(get_greeting("Moody"))
=> Hi Moody
-------------------code----------------------

or even store it in variable
-------------------code----------------------
message = get_greeting("Moody")
-------------------code----------------------

which form of this greeting functions is better? 
- this first implementation (greet function) we are locked 
to printing something in the terminal in the future if you want to write that message in a file or send it in an email we have to create
another function so we cannot reuse this great function in other scenarios.

in contrast this second form is not tied to printing something on the terminal.
-------------------code----------------------
print(message)
=> Hi Moody
-------------------code----------------------

it simply returns a value now we get this value and we can do
whatever we want with it we can print it on the terminal or we can use the built-in open function to write this
message to a file so we can create a file like content dot txt open it for writing this returns a file object.
and then we can call file that write message
-------------------code----------------------
file = open("content.txt", "w")
file.write(message)
-------------------code----------------------

- but what we want to take away here is that we have this message
variable and we can do whatever we want with it we can
print it on the terminal, write it to a file, send it in an email and so on

- what if we call great which already had print function inside print function l
we get hi mosh followed by none what is this
-------------------code----------------------
def greet(name):
    print(f"Hi {name}")


print(greet("Moody"))
=> Hi Moody
None
-------------------code----------------------

- None is the return value of the greet function
so in python all functions by default
return the none value.

- none is an object that represents the absence of a value
means it's return nothing.

- all functions return none by default unless you specifically return a value
so here if we return some string
none will no longer be returned
-------------------code----------------------
def test(name):
    # print(f"Hi {name}")
    return "...."
-------------------code----------------------

PS: even though this function returns none by default
it is still classified as a function that carries out a task
-------------------code----------------------
def greet(name):
    print(f"Hi {name}")
-------------------code----------------------

*** 4- Keyword Arguments ***
Let's create another function
We call it increment. We want to use this function to increment a number by a given value.
and store it in in a variable "result" and then print it on the terminal
-------------------code----------------------
def increment(number, by):
    return number + by


result = increment(2, 1)
print(result)
=> 3
-------------------code----------------------

- We can simplify this code
We have used this result variable only in a single place that is line 6
So we don't really need it. So on line 6 we can replace result with a call to increment function
like this
-------------------code----------------------
def increment(number, by):
    return number + by


print(increment(2, 1))
-------------------code----------------------

- So when Python interpreter executes this code first, it will call the increment function
It will get the result and temporarily store it in a variable for us
We don't see that variable and then it will pass that variable as an argument to the print function


- Now if we run this program we get the exact same result
-------------------code----------------------
def increment(number, by):
    return number + by


print(increment(2, 1))
=> 3
-------------------code----------------------

- Now we can make this code more readable
if someone else looks at line 5 they may not know exactly What these arguments are for we can use a "keyword argument"
to make this code more readable So this one here is the value of this by parameter. 
We can prefix it With the name of the parameter like this
-------------------code----------------------
print(increment(2, by=1))
# 3
-------------------code----------------------

Now we can read this code almost like plain English
increment 2 by 1

So if you're calling a function with multiple arguments and it's not quite clear what these arguments are for
You can make your code more readable by using keyword arguments.