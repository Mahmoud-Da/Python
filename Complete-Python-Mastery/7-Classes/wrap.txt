*** 1- Classes ***

- In this section, we're going to look at classes which are extremely important in Python programming,
or in programming in general. 

- So let's start with an example.
we're going to define a list of numbers like this.
-------------------code----------------------
numbers = [1, 2]
-------------------code----------------------

- Now, we have learned that when we use the dot notation,
we get access to all these functions, or more accurately,
methods in list objects. 
- So every list object in Python has these methods.
-------------------code----------------------
numbers = [1, 2]
numbers.
-------------------code----------------------



- Now, wouldn't that be nice if we could create an object like shopping cart,
and this object would have methods like add, remove, get total, like this. 
-------------------code----------------------
shopping_cart.add()
shopping_cart.remove()
shopping_cart.get_total()
-------------------code----------------------

- Or as another example,
wouldn't that be nice if we could have a point object with methods like draw,
move, or get distance,
to get the distance between this point and another point.
-------------------code----------------------
point.draw()
point.move()
point.get_distance(1, 2)
-------------------code----------------------

- That's when classes come to the rescue.
So a class is a blueprint for creating new objects. Throughout the course, 
we have heard the term class.

- For example, let's define a variable and set it to an integer,
and then print its type.
When we run this program, what do we see here?
A class of int. So in Python,
we have a class called int for creating integers.
-------------------code----------------------
x = 1
print(type(x))

# <class 'int'>
-------------------code----------------------


- Similarly, we have classes for creating booleans, lists, dictionaries, and so on.
So every object that we have in Python is created using a class
which is a blueprint for creating objects of that type.

- In this section, we're going to learn how to create custom classes,
like customer, shopping cart, point, and so on.


- Now, before we get started, let's define a few terms.
Once again, a class is a blueprint for creating new objects.
An object is an instance of a class. As an example, we could have a class called human,
and this class would define all the attributes of humans.
Then we could create objects, like John, Mary, Jack, and so on.
-------------------code----------------------
# Class: blueprint for creating new objects
# Object: instance of a class

# Class: Human
# Objects: John, Mary, Jack, and ....
-------------------code----------------------

- So this is the difference between classes and objects.
Now a lot of people use these terms interchangeably,
but technically, a class and an object are different. 

*** 2- Creating Classes ***
- Alright, now let's see how we can create a point class in python.
So we start with the class keyword, then we give our class
a name, like point.
-------------------code----------------------
class Point
-------------------code----------------------

- Note that here we're using Pascal naming convention, which is different from the
naming convention that we use for naming our variables and functions.

- To name our variables and functions, we use all lowercase letters
and we separate multiple words using an underscore. But to name
our classes we use a different convention, which is called Pascal
naming convention. And basically it says that the first letter
of every word should be uppercase and we shouldn't use
an underscore to separate multiple words. Here's an example
we can call this class my point, we can see that the first letter
of every word is uppercase and there is no underscore here.
-------------------code----------------------
class MyPoint
-------------------code----------------------


- after this we add a colon to indicate a block
in this block we'll define all the functions related to points
for example we can define functions for drawing a point for moving this point to a new location
or getting the distance from this point and another point
we define a function called draw parenthesis
now all functions in our classes should have at least one parameter and by convention
we call that parameter "self"  Now we add our colon
and let's just print the word draw on the terminal
-------------------code----------------------
class Point:
    def draw(self):
        print("draw")
-------------------code----------------------

- so now we have a class or a blueprint for creating
point objects every point object that we create will have this draw method

- to create a point object we call this class like a function
there we go now this returns a point object
that we can assign to a variable like point so
if we use the dot operator we can see we have the draw method
as well as a bunch of other methods that we didn't define
but our point object got these methods from another object in python
through a mechanism called "inheritance" we'll look at that later in this section
-------------------code----------------------
point = Point()
point.  => to see the draw method
print(type(point))
# <class '__main__.Point'>
-------------------code----------------------


- we get a class of main dot point this main we see here
is the name of our "module" and we're going to look at that later in this section
so this is the type function that we have seen before we have another useful function
called "isinstance" sometimes we have an object and we want to know if this object
is an instance of a given class.
-------------------code----------------------
print(isinstance(point, Point))
# True
-------------------code----------------------

- however if we change this to int
obviously our point object is not an instance of the int class
so when we run this program we get false.
-------------------code----------------------
print(isinstance(point, int))
# False
-------------------code----------------------



- but our point objects need some initial values like x and y
to set these values we need a constructor.

*** 3- Constructors ***
So here when we create a point object, we want to supply initial
values for x and y coordinates, like this.
-------------------code----------------------
 class Point:
     def draw(self):
         print("draw")

point = Point(1, 2)
-------------------code----------------------

- To achieve this we need a constructor which is a special method that is called 
when we create a new point object.

- how to create a constructor.
So, in our point class, we define a new function the name of this function should be 
double underline init double underline "__init__".

- This is a special method that we call
a magic method. In python classes we have several
magic methods, and we're going to learn more about them throughout this section.


- So, this magic method is called a constructor, and it's executed
when we create a new point object. Now earlier we told  that
all the methods that we define in a class should have at least one parameter
which we call self by convention. So, we add self, and then
optionally we add any additional parameters for initializing a point object, like x
and y.
-------------------code----------------------
def __init__(self, x, y):
-------------------code----------------------

- Now, what is this self?
Self is a reference to the current point object.
For example, when we call the point class, python will internally create
a point object in memory and set self
to reference that point object.

Now, this point object has a bunch of methods that we have seen before
for example, when we use the dot operator we can see all the methods
in this point object.
-------------------code----------------------
point = Point(1, 2)
point.

=> __annotations__
=> __str__
-------------------code----------------------

- But an object can also have attributes
which are basically variables that include data about that object.
For example, we can have attributes like x and y that we can easily print
on the terminal.

- In other words, a class run object bundles data
and functions related to that data into one unit.
think of a human. A human can have attributes like eye color, height,
weight, and so on. As well as functions like walk, talk, and so on.

- So, back to our constructor.
we learned that self is a reference to the current object.
So we can use that to set the x and y attributes
like this.
-------------------code----------------------
def __init__(self, x, y):
  self.x
-------------------code----------------------

- We can set it to some default value like 0.
-------------------code----------------------
self.x = 0
-------------------code----------------------

- or this x argument that we receive in this method.
-------------------code----------------------
self.x = x
-------------------code----------------------

- Similarly, let's set self dot y to y.
-------------------code----------------------
def __init__(self, x, y):
        self.x = x
        self.y = y
-------------------code----------------------

- Now with this code, when we use the dot operator
look we have the draw method
as well as the two new attributes x and y.

- So, we can simply print
point dot x on terminal.
-------------------code----------------------
point = Point(1, 2)
print(point.x)
# 1
-------------------code----------------------


- Now, back to our draw method.
Here again we have this self parameter,
so using this we have a reference to the current point object, and with that we can
read the x and y values and print them on the terminal.

- So here we're going to change this
implementation, and pass a formatted string.
-------------------code----------------------
def draw(self):
    print(f"Point ({self.x}, {self.y})")
-------------------code----------------------

- So using self, we can read attributes of the current object,
or we can also call other methods in this object.

- Now, let's simply call point dot draw.
-------------------code----------------------
point = Point(1, 2)
point.draw()
# Point (1, 2)
-------------------code----------------------


- Now what is interesting here is that when calling the draw method
we didn't have to supply a value for the self parameter,
because python does that by default.
-------------------code----------------------
point.draw(point) 

point.draw()
-------------------code----------------------

- Now technically, we cana pass this point object as a reference
to the current object, but this is really unnecessary,
and it makes our code busy or noisy.


- So, here's what we need to take away.

1- The methods that we define in a class should have at least, one parameter
which by convention is called "self", and this references
the current point object that we're working with.

2- When calling methods of an object, we never have to supply a value
for this parameter, python interpreter does that for us.
