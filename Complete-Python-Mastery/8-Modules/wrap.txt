*** 1- Creating Modules ***

- So far we have written all our code in one file, app.py
But that's not how we build real programs, because a real program can contain
tens of thousands of lines of code. We don't want to write all that
code in one file. 

- That is like going to a supermarket without any
sections. All products are in one place. Finding a product in a
supermarket like that is really hard, right? That's why in supermarkets
we have various aisles or sections or departments.

- We have the same concept in programming. So as our program grows, we should split
our code across multiple files. We refer to each file a
module. So a module is a file that contains some python code.

- Now here's a question, how do we decide what functions or what classes
we should put in what modules? Once again, let's go back to our supermarket
example. In a supermarket, each section contains highly
related products. So when we go to the fruit section, we only see fruits.
You don't see cleaning products there, right?
By the same token, a module should contain highly related objects.

- These objects can be functions, classes, variables, and so on.
So here, as an example, we have defined two functions. These functions have
no implementation, but they are both highly related to the concept of sales.
-------------------code----------------------
def calc_tax():
    pass


def calc_shipping():
    pass
-------------------code----------------------

- We have calculate tax and calculate shipping. So let's go ahead
and put these functions in a separate
module called sales  Here in the project folder, we're going to add a new file
and call it sales.py and This is our sales module.

- Note that in terms of naming convention, just like variables and functions,
we use all lowercase letters, and if we have multiple words, we separate them
using an underscore.

- Now, back to app.py, let's get all this
code, and move it to sales module. Okay, now back to the app module. We need to import
one or two functions from our sales module.

- There are a couple of different ways to achieve this. You have seen one way
before, so we start with from, then we add the name of our module, which is sales.

- Note that it's not sales.py, it's only the name of the file.
So from sales import, now if we press control
and space here, we can see all the objects defined in this
module. Currently we have these
two functions, as well as a bunch of variables that python automatically
creates. We'll look at these later.

- So let's say we want to import the calculate shipping function, there we
go. Now we can call this function just like a function that we have defined
in our app module. So calculate shipping. As simple as that.
-------------------code----------------------
from sales import calc_shipping

calc_shipping()
calc_tax()
-------------------code----------------------
 
- Now if we want to import multiple objects from a module,
we can separate them using a comma.
-------------------code----------------------
from sales import calc_shipping, calc_tax
-------------------code----------------------

- So here we can also import calculate tags, and then
call it here. Now there are some tutorials out there that teach us a
shortcut to import multiple objects using an asterisk.
-------------------code----------------------
from app1_sales import *
-------------------code----------------------

- While this makes our code shorter, it's actually a bad practice.
Because in that module we could have several different functions or variables,
and if we blindly import them into the current module, some of those
objects may overwrite the objects with the same name in the
current module. 
So don't import all objects like this. Only import the stuff that we need.

-   There is also another way to import
a module. Instead of starting with from, we start with import,
and then we add the name of the module. Now
in this module we have an object called sales, and we can use
the dot operator to access
its members. 
-------------------code----------------------
import sales
-------------------code----------------------

- So our calculate shipping function is now a method
in this object. And we call it like this.
-------------------code----------------------
sales.calc_shipping()
sales.calc_tax()
-------------------code----------------------

- So basically we can either import the entire module as an object,
or we can import specific objects from that module. What approach
we choose is purely our personal preference, there is no right or wrong here. There's
not even a performance difference.
 Because whenever we want to import one object from a module, that entire module needs
to be loaded. Now we can pick one object, or every object in that module.

*** 2- Compiled Python Files ***
- So these are the files or modules we currently have in this folder. We have
app.py which is our main module or the entry point to our program
as well as the sales module.

- Now when we run this program.
-------------------code----------------------
python3 app2.py
-------------------code----------------------

- we will see a new folderSo python app.py
There we go. We have this new folder pycache and in this folder we have the compiled version
of the modules that we import into our program.


- So currently we have the compiled version of the sales module. The reason
python stores these compiled files in this folder is to speed up module
loading. So next time we run our program, python will look at the content
of this folder and if we do have the compiled version of the sales
module, python will simply load that compiled version. So it will skip
that compilation step and this will result in faster
loading of the sales module. 

- Note that it only speeds up the loading of this module, not the actual
performance of the application. Now how does python know if this compiled
version is up to date with the latest code in the sales module? Well,
it basically checks the date time of these two files "sales.py" and "app2.py", the
compiled version as well as the source code. 

- If the date time of this source file is newer, it
realizes that our source code is changed so it will recompile it and store it
in this pycache folder.

- So that's the basic idea. Now this c python 313 we see in the file name here
represents the python implementation used to compile this file.
-------------------code----------------------
sales.cpython-313.pyc
-------------------code----------------------

- So we have compiled this file using c python version 3.13 In this file we have
python bytecode, So when we click on the compiled file, by default
vscode doesn't show the content of this file because it's binary.

- But if we click "Open anyway", we can see the python bytecode
representation of our sales module.

- Now back to this pycache folder, note that we don't have the compiled version
of the app module, because python always re-compiles the module
that we load directly from the command line.

- So in this demo we passed
app2.py as the entry point to python and that's the reason python didn't
cache the compiled version of this module.

*** 3- Module Search Path ***
- So here in app3.py, we're currently importing the sales module.
-------------------code----------------------
import sales
-------------------code----------------------
-  When python sees this, it will look for a file called sales.py in the current directory.

- If it doesn't find this file, it will look in a bunch of predefined directories that
come with python installation. 

- to see that, So, we have a built-in module called path, let's import that.
In this module, we have a variable, path, which returns the list of directories that python will look at to find a module.
Let's print this on the terminal.
-------------------code----------------------
import sys

print(sys.path)
# ['Python/Complete-Python-Mastery/8-Modules', '/Library/Frameworks/Python.framework/Versions/3.13/lib/python313.zip', '/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13', '/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/lib-dynload', '/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages']
-------------------code----------------------

- So as we see, we get an array of strings, the first element in this array represents the current folder.
-------------------code----------------------
'Python/Complete-Python-Mastery/8-Modules'
-------------------code----------------------

- After that, we have library, frameworks, python framework, version 3.13.
-------------------code----------------------
'/Library/Frameworks/Python.framework/Versions/3.13/lib/python313.zip'
'/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13'
'/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/lib-dynload'
'/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages'
-------------------code----------------------

- Again, this is going to be different on our machine depending on our operating system. we're using mac, so this is the address of python installation on macOS.
On windows, we're probably going to get something like c drive, backslash program files, python, blah, blah, blah.

- So when python sees an import statement, it will search all these directories to find this module.
As soon as it finds the module, the search stops there.

- Now, we might be curious how we can import a module from a subdirectory.
Well, to do that, we need to look at packages, and that's the topic for the next lecture.
For the next lecture.

*** 4- Packages ***

- Currently all our files or modules are in this folder, but as our application
grows, we probably want to organize these files into subdirectories.

- Otherwise we'll end up with hundreds or even thousands of python files or
python modules in one folder. That is not good.
So in this demo, we want to move this sales module to a subdirectory called "ecommerce". 

- So we're going to add a new subdirectory, ecommerce, and then drag and drop this module
right here. Now back to app4.py, we can see we have a red underline here, because python cannot find
a sales module. 
-------------------code----------------------
import sales
-------------------code----------------------

- To fix this issue, we should come back to our ecommerce folder and add a new file called
double underscore __init__py. When we add this file here, python would treat
the ecommerce folder as a package. 

- So a package is a container for one or more modules.
In file system terms, a package is mapped to a directory, and a module is mapped
to a file. 

- So, now we can go back to app4.py, and prefix the name of this
module with the name of its package. That is ecommerce.sales .
-------------------code----------------------
import ecommerce.sales
-------------------code----------------------

- Now to use any of the objects in the sales module, we need to prefix
them with the name of their package and modules.
-------------------code----------------------
ecommerce.sales.calc_shipping()
-------------------code----------------------

- So, ecommerce dot sales
dot calc_shipping. Obviously, this is going to make our code
a little bit noisy, because every time we want to use one of the objects in the
sales module, we'll have to type ecommerce dot sales dot. That is tedious.

- A better approach is to use the from statement. So,
we change this to from, ecommerce dot sales, import,
calculate, tax. Now we can simply call this function like a function defined
in app module, that is better.
-------------------code----------------------
from ecommerce.sales import calc_shipping

calc_shipping()
-------------------code----------------------

- But what if we want to use multiple objects in the sales module?
Well, we can list them all here.
-------------------code----------------------
from ecommerce.sales import calc_shipping, calc_tax
-------------------code----------------------

-  but if that ends up being too noisy, we can
take a different approach. So, we can type from ecommerce import sale.
So we're importing the sales module as an object and then we can use the dot
operator to access all the members of this module.
-------------------code----------------------
from ecommerce import sales

sales.calc_shipping()
-------------------code----------------------

*** 5- Sub-packages ***

- as our programs grow, we may want to break down a package into sub packages.
For example, let's imagine our e-commerce package has grown
a lot, we have so many files and modules here, so we decide to
break this package into a few sub packages.

- So we're going to add a new folder inside ecommerce folder, call it shopping,
and then move the sales module in this folder.

- So on the top we have the ecommerce package,
and under that we have the shopping package. Now currently shopping
is not a package because in this folder we don't have the init file.


- Now back to app5.py, once again Python cannot find our sales module,
so to fix this issue, we need to add the name of our new sub package
here. So ecommerce.shopping.
-------------------code----------------------
from ecommerce.shopping import sales

sales.calc_shipping()
-------------------code----------------------

*** 6- Intra-package References ***

- There are times that we want to import modules from sibling packages.
For example, here in our ecommerce package, we have added a new sub package
customer, in this package we have this contact module
for contacting our customers. 
-------------------code----------------------
def contact_customer():
    pass
-------------------code----------------------

- Now let's say, in our sales module
we want to use the contact module in the customer package.  how to do this.
So we open this, to import a module from another package
we can use an absolute or relative import statement.

- absolute import
-------------------code----------------------
from ecommerce.customer import contact

contact.contact_customer()
-------------------code----------------------

- We can also use a relative import. So, from, dot, this represents the current package.
Dot dot takes us one level up, so now we are at the ecommerce package level
in this package we have two sub packages, customer and shopping.
-------------------code----------------------
from ..customer import contact
-------------------code----------------------

- As a best practice, prefer to use absolute imports
and that's what PEP 8 also recommends. But if our absolute import
gets really verbose, like a dot b dot c dot d dot e, then we might be able to simplify the import statement
by using a relative import.
