*** 1- Python Standard Library ***

- Python has a batteries included philosophy, which means it comes with a comprehensive library of
packages and modules that provide common features that we need when building real applications.

- So in this section, we're going to explore Python standard library. More specifically,
we're going to learn how to work with files and directories, SQLite databases,
date and time objects, generate random values, send emails, and so on.

- As we go through this section, don't worry about memorizing anything. Just try to get an idea what is where and what we
can do. we can always come back to this section and treat it as a reference. 

- For example, if in the future we want to generate random values, we can come back and watch the corresponding lecture.


*** 2- Working With Paths ***

- Over the next few lectures, we're going to learn how to work with files and directories in Python.
In this lecture we're going to look at the path class, because that's the
foundation to work with files and directories. 


- So,
let's import the path class, now we can create a path object in a few different ways.
-------------------code----------------------
from pathlib import Path
-------------------code----------------------

- We can create an absolute path, for example, if we're on windows
we can create a path object like this. C drive,
backslash, program files, backslash, Microsoft
or whatever.
-------------------code----------------------
Path("C:\\Program Files\\Microsoft")
-------------------code----------------------
 
- Now when working with a long path, these double backslash
get a little bit ugly, so we can simplify this by using a raw
string. In a raw string, backslash is not an escape character,
it's taken literally as is. So, we prefix
this with an R, now we have a raw string, so we can get rid of
the second backslash, like this.

-------------------code----------------------
Path(r"C:\Program Files\Microsoft")
-------------------code----------------------

- Now if we're on mac or linux, we can create
an absolute path like this slash user, slash local,
slash bin.
-------------------code----------------------
Path("/usr/local/bin")
-------------------code----------------------

- we can also create a path object that
represents the current folder.
-------------------code----------------------
Path()
-------------------code----------------------

- or we can use a relative path here,
so current folder, let's go to the ecommerce
subfolder, and then pick init.py.
-------------------code----------------------
Path("ecommerce/__init__.py")
-------------------code----------------------

- we can also combine path objects
together, for example we can have one path object, and then using
a slash, combine it
with another path.
-------------------code----------------------
Path() / Path("ecommerce")
-------------------code----------------------

- or we can also combine a path object
with a string, so here we can
have a string.
-------------------code----------------------
Path() / "ecommerce"
-------------------code----------------------

- and then again we can combine
this with another string. 
-------------------code----------------------
Path() / "ecommerce" / "__init__.py"
-------------------code----------------------

- We can also get the home directory of the current user,
so this path class
has a class method called home, that returns the home directory
of the current user. 
-------------------code----------------------
Path.home()
-------------------code----------------------

- So these
are various ways to create the path object, in this demo, we're going to use
what we have here, and store the result in variable we called path.
-------------------code----------------------
path = Path("ecommerce/__init__.py")
-------------------code----------------------

- Now this path object has quite a few useful members,
and in this lecture we're going to show we the most
important ones, but if we want to see the
comprehensive list, simply search for 
-------------------code----------------------
python3 pathlib
-------------------code----------------------


- So with this path object we can call the exist method
to see if this file or directory exists or not
-------------------code----------------------
path.exists()
-------------------code----------------------

- to see if this path represents a file we call is file,
-------------------code----------------------
path.is_file()
-------------------code----------------------

- we also have is directory.
-------------------code----------------------
path.is_dir()
-------------------code----------------------


- we can also extract individual
components in this path which is extremely useful, for example, let's
print path.name so this returns only the file name in this path.
-------------------code----------------------
print(path.name)
# __init__.py
-------------------code----------------------

- We also have path.stem which returns the file name without the extension.
-------------------code----------------------
print(path.stem)
# __init__
-------------------code----------------------

- If we want to get the extension, we can access the suffix attribute,
so this returns .py.
-------------------code----------------------
print(path.suffix)
# .py
-------------------code----------------------


- we can
also get the parent of this path, so path.parent and this returns
the parent folder, ecommerce.
-------------------code----------------------
print(path.parent)
# ecommerce
-------------------code----------------------

- Now here we have a couple other useful methods, one of them is with name, so
path.with name. And we can use this to create a new path object based on this existing path
but only change the name and the extension of the file.
So if we pass, let's say file.txt we get a new path object here. 
-------------------code----------------------
path = path.with_name("file.txt")
print(path)
# ecommerce/file.txt
-------------------code----------------------


- we can also get the absolute value of this path, so
path.absolute let's run the program so here's the absolute value
of this file.
-------------------code----------------------
print(path.absolute())
# /Python/ecommerce/file.txt
-------------------code----------------------

- Obviously this file doesn't exist yet, they're only
representing its path. 

- Now similar to this with name
we have another method with suffix
and we use that to change the extension
of a file. So with suffix
-------------------code----------------------
path = path.with_suffix(".py")
print(path)
# ecommerce/file.py
-------------------code----------------------

- note that here we have not renamed the file
we're only representing a path object. Over the next couple
lectures we will show we how to rename files
and directories. So these are the important members
of the path class that we should know
in the next lecture we'll look at working with directories.

*** 3- Working with Directories ***
- So here we have a path object that represents a directory.
A few useful methods that we need to be aware of are
exists, that returns a boolean, mkdir
to create this directory, rmdir to remove it,
and rename to rename it to a new name.
-------------------code----------------------
from pathlib import Path

path = Path("ecommerce")
path.exists()
path.mkdir()
path.rmdir()
path.rename("ecommerce2")
-------------------code----------------------

- so in this lecture we're not going to look at these, instead
we're going to look at another method that is iter, dir.
-------------------code----------------------
print(path.iterdir())
# <map object at 0x102d8fcd0>
-------------------code----------------------

- With this method we can get the list of files and directories in this path.
So let's print the result and see what we get.
We get a generator object. Remember generator objects?
A generator object, as the name implies, returns a new value
every time we iterate it. So when we're working with a large list of items,
instead of storing all those items in the memory, we use a generator object.
we iterate it and get a new value every time. This is more efficient.
So that's the reason this method returns
a generator object, because when working with files
and directories, it is possible that we can have
a directory with a million files in it.

- So, now we can iterate over this, let's say for p,
and then print p. Let's run the program. So on my machine, we have one file
and three directories at this path. As we can see, this method returns
both the files and directories.
-------------------code----------------------
for p in path.iterdir():
    print(p)

# ecommerce/shopping
# ecommerce/sales.py
# ecommerce/__init__.py
# ecommerce/__pycache__
# ecommerce/customer
-------------------code----------------------

- Now, if we're working with a directory that doesn't have
a million files in it, we can convert this generator
to a list using a list comprehension expression.
So, instead of iterating over this generator, we can use
a list comprehension, which is pretty similar to what we have here.
We add the square brackets.
-------------------code----------------------
paths = [p for p in path.iterdir()]
print(paths)
# [PosixPath('ecommerce/shopping'),
#  PosixPath('ecommerce/sales.py'),
#  PosixPath('ecommerce/__init__.py'),
#  PosixPath('ecommerce/__pycache__'),
#  PosixPath('ecommerce/customer')]
-------------------code----------------------

- Now, we get all these paths and we can print them.
Let's see what we get. We get an array of POSIX path objects.
What is this? Well, this path class that we imported on the top,
this is the base class for two different classes. POSIX path and windows path.
POSIX is the standard use in Unix-like operating systems, so because
we're using a Mac, here we have a list of POSIX path objects.

- If we're on windows, we see a list of windows path objects. Okay?
Now here we can take this comprehension expression to the next level and apply filtering.
Let's say we only want to get the directories. So here are the three directories
that we have inside of the e-commerce directory.
-------------------code----------------------
paths = [p for p in path.iterdir() if p.is_dir()]
print(paths)
# [PosixPath('ecommerce/shopping'),
#  PosixPath('ecommerce/__pycache__'),
#  PosixPath('ecommerce/customer')]
-------------------code----------------------

- So, this method is pretty useful to get the list of files and directories
in a path, but it has two limitations. One is that
we cannot search by a pattern, and second is that it doesn't search
recursively.

- So, for those scenarios we need to use a different method.
That is glob. this method takes a pattern so we can search for all files
or let's say all py files, similar to the other method
this returns a generator. So, we can use it an expression
like this.
-------------------code----------------------
py_files = [p for p in path.glob("*.py")]
print(py_files)
# [PosixPath('ecommerce/sales.py'),
#  PosixPath('ecommerce/__init__.py')]
-------------------code----------------------

- Now, to search recursively we need to change this pattern
to something like this. 
-------------------code----------------------
py_files = [p for p in path.glob("**/*.py")]
print(py_files)
# [PosixPath('ecommerce/sales.py'),
#  PosixPath('ecommerce/__init__.py'),
#  PosixPath('ecommerce/shopping/sales.py'),
#  PosixPath('ecommerce/shopping/__init__.py'),
#  PosixPath('ecommerce/customer/__init__.py'),
#  PosixPath('ecommerce/customer/contact.py')]
-------------------code----------------------

The other option is to use the r glob
method. So, we remove the pattern and use r glob short for recursive glob
now when we run this program we get all the pi files
in the e-commerce directory and all its children.
-------------------code----------------------
py_files = [p for p in path.rglob("*.py")]
print(py_files)
# [PosixPath('ecommerce/sales.py'),
#  PosixPath('ecommerce/__init__.py'),
#  PosixPath('ecommerce/shopping/sales.py'),
#  PosixPath('ecommerce/shopping/__init__.py'),
#  PosixPath('ecommerce/customer/__init__.py'),
#  PosixPath('ecommerce/customer/contact.py')]
-------------------code----------------------
