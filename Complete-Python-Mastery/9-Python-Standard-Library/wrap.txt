*** 1- Python Standard Library ***

- Python has a batteries included philosophy, which means it comes with a comprehensive library of
packages and modules that provide common features that we need when building real applications.

- So in this section, we're going to explore Python standard library. More specifically,
we're going to learn how to work with files and directories, SQLite databases,
date and time objects, generate random values, send emails, and so on.

- As we go through this section, don't worry about memorizing anything. Just try to get an idea what is where and what we
can do. we can always come back to this section and treat it as a reference. 

- For example, if in the future we want to generate random values, we can come back and watch the corresponding lecture.


*** 2- Working With Paths ***

- Over the next few lectures, we're going to learn how to work with files and directories in Python.
In this lecture we're going to look at the path class, because that's the
foundation to work with files and directories. 


- So,
let's import the path class, now we can create a path object in a few different ways.
-------------------code----------------------
from pathlib import Path
-------------------code----------------------

- We can create an absolute path, for example, if we're on windows
we can create a path object like this. C drive,
backslash, program files, backslash, Microsoft
or whatever.
-------------------code----------------------
Path("C:\\Program Files\\Microsoft")
-------------------code----------------------
 
- Now when working with a long path, these double backslash
get a little bit ugly, so we can simplify this by using a raw
string. In a raw string, backslash is not an escape character,
it's taken literally as is. So, we prefix
this with an R, now we have a raw string, so we can get rid of
the second backslash, like this.

-------------------code----------------------
Path(r"C:\Program Files\Microsoft")
-------------------code----------------------

- Now if we're on mac or linux, we can create
an absolute path like this slash user, slash local,
slash bin.
-------------------code----------------------
Path("/usr/local/bin")
-------------------code----------------------

- we can also create a path object that
represents the current folder.
-------------------code----------------------
Path()
-------------------code----------------------

- or we can use a relative path here,
so current folder, let's go to the ecommerce
subfolder, and then pick init.py.
-------------------code----------------------
Path("ecommerce/__init__.py")
-------------------code----------------------

- we can also combine path objects
together, for example we can have one path object, and then using
a slash, combine it
with another path.
-------------------code----------------------
Path() / Path("ecommerce")
-------------------code----------------------

- or we can also combine a path object
with a string, so here we can
have a string.
-------------------code----------------------
Path() / "ecommerce"
-------------------code----------------------

- and then again we can combine
this with another string. 
-------------------code----------------------
Path() / "ecommerce" / "__init__.py"
-------------------code----------------------

- We can also get the home directory of the current user,
so this path class
has a class method called home, that returns the home directory
of the current user. 
-------------------code----------------------
Path.home()
-------------------code----------------------

- So these
are various ways to create the path object, in this demo, we're going to use
what we have here, and store the result in variable we called path.
-------------------code----------------------
path = Path("ecommerce/__init__.py")
-------------------code----------------------

- Now this path object has quite a few useful members,
and in this lecture we're going to show we the most
important ones, but if we want to see the
comprehensive list, simply search for 
-------------------code----------------------
python3 pathlib
-------------------code----------------------


- So with this path object we can call the exist method
to see if this file or directory exists or not
-------------------code----------------------
path.exists()
-------------------code----------------------

- to see if this path represents a file we call is file,
-------------------code----------------------
path.is_file()
-------------------code----------------------

- we also have is directory.
-------------------code----------------------
path.is_dir()
-------------------code----------------------


- we can also extract individual
components in this path which is extremely useful, for example, let's
print path.name so this returns only the file name in this path.
-------------------code----------------------
print(path.name)
# __init__.py
-------------------code----------------------

- We also have path.stem which returns the file name without the extension.
-------------------code----------------------
print(path.stem)
# __init__
-------------------code----------------------

- If we want to get the extension, we can access the suffix attribute,
so this returns .py.
-------------------code----------------------
print(path.suffix)
# .py
-------------------code----------------------


- we can
also get the parent of this path, so path.parent and this returns
the parent folder, ecommerce.
-------------------code----------------------
print(path.parent)
# ecommerce
-------------------code----------------------

- Now here we have a couple other useful methods, one of them is with name, so
path.with name. And we can use this to create a new path object based on this existing path
but only change the name and the extension of the file.
So if we pass, let's say file.txt we get a new path object here. 
-------------------code----------------------
path = path.with_name("file.txt")
print(path)
# ecommerce/file.txt
-------------------code----------------------


- we can also get the absolute value of this path, so
path.absolute let's run the program so here's the absolute value
of this file.
-------------------code----------------------
print(path.absolute())
# /Python/ecommerce/file.txt
-------------------code----------------------

- Obviously this file doesn't exist yet, they're only
representing its path. 

- Now similar to this with name
we have another method with suffix
and we use that to change the extension
of a file. So with suffix
-------------------code----------------------
path = path.with_suffix(".py")
print(path)
# ecommerce/file.py
-------------------code----------------------

- note that here we have not renamed the file
we're only representing a path object. Over the next couple
lectures we will show we how to rename files
and directories. So these are the important members
of the path class that we should know
in the next lecture we'll look at working with directories.

*** 3- Working with Directories ***
- So here we have a path object that represents a directory.
A few useful methods that we need to be aware of are
exists, that returns a boolean, mkdir
to create this directory, rmdir to remove it,
and rename to rename it to a new name.
-------------------code----------------------
from pathlib import Path

path = Path("ecommerce")
path.exists()
path.mkdir()
path.rmdir()
path.rename("ecommerce2")
-------------------code----------------------

- so in this lecture we're not going to look at these, instead
we're going to look at another method that is iter, dir.
-------------------code----------------------
print(path.iterdir())
# <map object at 0x102d8fcd0>
-------------------code----------------------

- With this method we can get the list of files and directories in this path.
So let's print the result and see what we get.
We get a generator object. Remember generator objects?
A generator object, as the name implies, returns a new value
every time we iterate it. So when we're working with a large list of items,
instead of storing all those items in the memory, we use a generator object.
we iterate it and get a new value every time. This is more efficient.
So that's the reason this method returns
a generator object, because when working with files
and directories, it is possible that we can have
a directory with a million files in it.

- So, now we can iterate over this, let's say for p,
and then print p. Let's run the program. So on my machine, we have one file
and three directories at this path. As we can see, this method returns
both the files and directories.
-------------------code----------------------
for p in path.iterdir():
    print(p)

# ecommerce/shopping
# ecommerce/sales.py
# ecommerce/__init__.py
# ecommerce/__pycache__
# ecommerce/customer
-------------------code----------------------

- Now, if we're working with a directory that doesn't have
a million files in it, we can convert this generator
to a list using a list comprehension expression.
So, instead of iterating over this generator, we can use
a list comprehension, which is pretty similar to what we have here.
We add the square brackets.
-------------------code----------------------
paths = [p for p in path.iterdir()]
print(paths)
# [PosixPath('ecommerce/shopping'),
#  PosixPath('ecommerce/sales.py'),
#  PosixPath('ecommerce/__init__.py'),
#  PosixPath('ecommerce/__pycache__'),
#  PosixPath('ecommerce/customer')]
-------------------code----------------------

- Now, we get all these paths and we can print them.
Let's see what we get. We get an array of POSIX path objects.
What is this? Well, this path class that we imported on the top,
this is the base class for two different classes. POSIX path and windows path.
POSIX is the standard use in Unix-like operating systems, so because
we're using a Mac, here we have a list of POSIX path objects.

- If we're on windows, we see a list of windows path objects. Okay?
Now here we can take this comprehension expression to the next level and apply filtering.
Let's say we only want to get the directories. So here are the three directories
that we have inside of the e-commerce directory.
-------------------code----------------------
paths = [p for p in path.iterdir() if p.is_dir()]
print(paths)
# [PosixPath('ecommerce/shopping'),
#  PosixPath('ecommerce/__pycache__'),
#  PosixPath('ecommerce/customer')]
-------------------code----------------------

- So, this method is pretty useful to get the list of files and directories
in a path, but it has two limitations. One is that
we cannot search by a pattern, and second is that it doesn't search
recursively.

- So, for those scenarios we need to use a different method.
That is glob. this method takes a pattern so we can search for all files
or let's say all py files, similar to the other method
this returns a generator. So, we can use it an expression
like this.
-------------------code----------------------
py_files = [p for p in path.glob("*.py")]
print(py_files)
# [PosixPath('ecommerce/sales.py'),
#  PosixPath('ecommerce/__init__.py')]
-------------------code----------------------

- Now, to search recursively we need to change this pattern
to something like this. 
-------------------code----------------------
py_files = [p for p in path.glob("**/*.py")]
print(py_files)
# [PosixPath('ecommerce/sales.py'),
#  PosixPath('ecommerce/__init__.py'),
#  PosixPath('ecommerce/shopping/sales.py'),
#  PosixPath('ecommerce/shopping/__init__.py'),
#  PosixPath('ecommerce/customer/__init__.py'),
#  PosixPath('ecommerce/customer/contact.py')]
-------------------code----------------------

The other option is to use the r glob
method. So, we remove the pattern and use r glob short for recursive glob
now when we run this program we get all the pi files
in the e-commerce directory and all its children.
-------------------code----------------------
py_files = [p for p in path.rglob("*.py")]
print(py_files)
# [PosixPath('ecommerce/sales.py'),
#  PosixPath('ecommerce/__init__.py'),
#  PosixPath('ecommerce/shopping/sales.py'),
#  PosixPath('ecommerce/shopping/__init__.py'),
#  PosixPath('ecommerce/customer/__init__.py'),
#  PosixPath('ecommerce/customer/contact.py')]
-------------------code----------------------

*** 4- Working with Files ***
- In this lecture we're going to learn about the useful
methods to work with files. 

- So here we have a pass object that references
a file, we can check to see if this file exists.
-------------------code----------------------
from pathlib import Path

path = Path("ecommerce/__init__.py")
path.exists()
-------------------code----------------------

- we can rename it to let's say init.txt.
-------------------code----------------------
path.rename("init.txt")
-------------------code----------------------

- we can delete it by calling the unlink method.
-------------------code----------------------
path.unlink()
-------------------code----------------------

- we also have the stat method that returns information about this file.
-------------------code----------------------
print(path.stat())
# os.stat_result(st_mode=33188,
#                st_ino=22143237,
#                st_dev=16777233,
#                st_nlink=1,
#                st_uid=501,
#                st_gid=20,
#                st_size=31,
#                st_atime=1740950939,
#                st_mtime=1740950938,
#                st_ctime=1740950938)
-------------------code----------------------


- We get a stat result object
with these attributes, for example, st underline size
returns the size of this file in bytes, we can also get
the last access time, the last modify time, and the creation time.

- Now all these time values are in seconds after epic, which is
the start of time on a computer, and that is platform dependent, for example
on unix systems, the epic time is January 1st 1970.

- So to print the human readable time
on the top from the time module we need to import the ctime function.
-------------------code----------------------
from time import ctime
-------------------code----------------------

- now from this stat object we can
pick st underline ctime, that is the creation time, and then pass it
to the ctime function.
-------------------code----------------------
print(ctime(path.stat().st_ctime))
# Mon Mar  3 06:28:58 2025
-------------------code----------------------

- We also have a couple methods for reading data from a file, so
pass the read bytes, which returns the content of the file as a bytes
object for representing binary data.
-------------------code----------------------
path.read_bytes()
-------------------code----------------------

- We also have read text, which returns the content of the file
as a string. So we can simply print the result here,
and this is the content of __init__.py file. 
-------------------code----------------------
print(path.read_text())
# print("Ecommerce initialized")
-------------------code----------------------

- Now using this method is easier than the built-in open function
that we've mentioned throughout the course. With the open function,
we'll have to specify the file name, let's say init.py,
then we need to specify the mode, now this returns a file object,
so we're going to make sure to close it, so as a best practice, we should use the
with statement, then get the file object like this,
and then do something with it.
-------------------code----------------------
with open("ecommerce/__init__.py", "r") as file:
    file.read()
-------------------code----------------------

- In contrast, when we use read text, all this magic
happens inside of this method, so we no longer have to worry about
opening a file, closing it, and so on. Similar to read text and read bytes,
we have write text, so we can call it to write some textual
data to a file, or pass.write bytes, again, both these methods take care of
opening and closing a file.
-------------------code----------------------
path.write_text("....")
path.write_bytes()
-------------------code----------------------

- So with this path object, we can do all kinds of operations with a file.
However, when it comes to copying a file, this path object
is not the ideal way to copy a file.

- So, we're going to comment out this few lines, let's say we want to copy this file
to a different location, so we're going to rename this path to source,
then, we're going to create a target path, which would be, let's say the current
directory, plus __init__.py.
-------------------code----------------------
source = Path("ecommerce/__init__.py")
target = Path() / "__init__.py"
-------------------code----------------------

- Now, to copy this file, we'll have to write code like this.
First, we need to read the content of the source, so read
text, then we need to write it to the target, so target.write text
like this.
-------------------code----------------------
target.write_text(source.read_text())
-------------------code----------------------

- It's a little bit tedious, there is a better way. We have a module called
shutil, or shell utilities, and this module provides
a number of high-level operations for copying and moving files and
directories. 

- So, on the top, let's import shutil.
-------------------code----------------------
import shutil
-------------------code----------------------

- now with this module, we can easily copy source to target.
This approach is cleaner and easier than using a pass object.
-------------------code----------------------
shutil.copy(source, target)
-------------------code----------------------

*** 5- Working with Zip Files ***
- In this lecture we're going to learn how to work with zip files in python.


- So, from the zip file module, let's import the zip file class. 
-------------------code----------------------
from zipfile import ZipFile
-------------------code----------------------

- Now we create a zip file object let's call that files.zip. Then as the second
argument we pass w short for write, because we're going to
write to the zip file. So this statement will create this file
in our current folder. Let's get a reference to this zip file and store it
here, or we could call it zip, that is shorter.
-------------------code----------------------
zip_file = ZipFile("files.zip", "w")
-------------------code----------------------

- Now let's say we want to get all the files in this ecommerce directory
and write them to this zip file. That is pretty easy. So
we create a pass object to reference the ecommerce directory
and then call rglob method to recursively find all the files in this
directory and all its children. As we know this returns a
generator, so we iterate over it for pass in and then call zip.write pass
and finally we should call the close method.
-------------------code----------------------
zip_file = ZipFile("files.zip", "w")

for path in Path("ecommerce").rglob("***"):
    zip_file.write(path)

zip.close()
-------------------code----------------------

- Now if something goes wrong here, chances are this statement may not be called.
So we should either use a try finally block or the with
statement, which is shorter and cleaner. So with this zip file
as zip_file now we indent everything here and then we don't need to call the close
method.
-------------------code----------------------
with ZipFile("files.zip", "w") as zip_file:
    for path in Path("ecommerce").rglob("***"):
      zip_file.write(path)
-------------------code----------------------

-  Let's save the changes
and run this program. Now we have a zip file here "files.zip", so let's go ahead and
read its content. So back in app.py, we're going to comment
out these few lines. This time we're going to create a
zip file that is files.zip, but we're not going to open
this in the right mode because we only want to read from it, right?
So this object has a method called name list
which returns the list of all the files
in this zip file. so these are all the files
we have in this zip file.
-------------------code----------------------
with ZipFile("files.zip") as zip_file:
    print(zip_file.namelist())

# ['ecommerce/shopping/',
#  'ecommerce/sales.py',
#  'ecommerce/__init__.py',
#  'ecommerce/__pycache__/',
#  'ecommerce/customer/',
#  'ecommerce/shopping/sales.py',
#  'ecommerce/shopping/__init__.py',
#  'ecommerce/shopping/__pycache__/',
#  'ecommerce/__pycache__/__init__.cpython-313.pyc',
#  'ecommerce/customer/__init__.py',
#  'ecommerce/customer/__pycache__/',
#  'ecommerce/customer/contact.py',
#  'ecommerce/customer/__pycache__/contact.cpython-313.pyc',
#  'ecommerce/customer/__pycache__/__init__.cpython-313.pyc',
#  'ecommerce/shopping/__pycache__/sales.cpython-313.pyc',
#  'ecommerce/shopping/__pycache__/__init__.cpython-313.pyc']
-------------------code----------------------


- we can get information about any of these files for example
pass the address of this file this returns an info object
from this we can print info.file size we also have info.compress size
let's look at the result
-------------------code----------------------
with ZipFile("files.zip") as zip_file:
    print(zip_file.namelist())

    info = zip_file.getinfo("ecommerce/__init__.py")
    print(info)
    print(info.file_size)
    print(info.compress_size)
# <ZipInfo filename='ecommerce/__init__.py' filemode='-rw-r--r--' file_size=31>

# 31
# 31
-------------------code----------------------

- so in this case we don't have compression because we're dealing with a really simple file

- now finally to extract all the files from the zip file
we call zip.extract_all and optionally specify a different
directory to extract to so here let's extract this
into this extract directory now here we have this extract directory
with the content of the ecommerce directory that we compressed
into a zip file.
-------------------code----------------------
with ZipFile("files.zip") as zip_file:
    print(zip_file.namelist())

    info = zip_file.getinfo("ecommerce/__init__.py")
    print(info)
    print(info.file_size)
    print(info.compress_size)
    zip_file.extractall("extract")
-------------------code----------------------

*** 6- Working with CSV Files ***
- In this lecture we're going to learn how to work with csv files in python.

- csv stands for comma separated value, and it's like a simplified spreadsheet
stored as a plain text file.

- So on the top, we import the csv module.
-------------------code----------------------
import csv
-------------------code----------------------

- first we need to open a file, so for this we need to use
the built-in open function, we cannot use the path class,
so open, let's call this file data.csv.
Now we want to open this in the right mode, because we want to write data to it.
This returns a file object, so when we are done, we should make sure
to close it.
-------------------code----------------------
file = open("data.csv", "w")
file. close()
-------------------code----------------------

- or as we told before, a better approach is to use the
with statement. So, with open
as file. Now we don't need to close the file, that is better.
-------------------code----------------------
with open("data.csv", "w") as file:
-------------------code----------------------

- So this csv module has a method for creating a csv writer.
We call this and pass our file object.
So look at the first parameter here, it has to be a file object, that's why
we cannot use the pass class. So we pass the file object here,
and this gives us a csv writer. And with this we can simply
write tabular data to our csv file.
-------------------code----------------------
with open("data.csv", "w") as file:
    writer = csv.writer(file)
    writer.writerow(["transaction_id", "product_id", "price"])
    writer.writerow([1000, 1, 51])
    writer.writerow([1001, 2, 15])
-------------------code----------------------

- Now let's save the changes and run this
program, okay. So here in our project folder, we have data.csv
as we can see, this is like a simplified spreadsheet. 
So we have a table of data, each line represents a row, and our cells are
separated using a comma. This is a very simple way to store data and transfer it from one
machine to another. 

-  how to read a csv file. So let's
say we have a csv file called data.csv Now we should open this file
in the read mode, so we don't want to supply this second argument. Next,
instead of a csv writer, we need a csv reader.
-------------------code----------------------
with open("data.csv") as file:
-------------------code----------------------

- So let's call the reader method, and rename this variable to reader.
Now we can call the list function to get all the data
in the csv file and convert it to a list object.
-------------------code----------------------
with open("data.csv") as file:
    reader = csv.reader(file)
    print(list(reader))
    # [['transaction_id', 'product_id', 'price'], ['1000', '1', '51'], ['1001', '2', '15']]
-------------------code----------------------


- as we see we get a list of lists,
so each line in our csv file is a list of objects.
Note that the value of each cell is represented as a string even if we're dealing with a number.
So we have to manually convert these strings
to integers, floats, and so on.

- We can also iterate over this reader object
because it's iterable. So for row
in reader, let's print row. Run the program, now we don't see anything here.
We only see the output of line 5 where we convert this reader to a list object.
-------------------code----------------------
with open("data.csv") as file:
    reader = csv.reader(file)
    print(list(reader))
    # [['transaction_id', 'product_id', 'price'], ['1000', '1', '51'], ['1001', '2', '15']]

    for row in reader:
        print(row)
-------------------code----------------------

- So what happened to these two lines?
Well, this reader object has an index or a position that is initially set to the beginning of the file.
When we convert this reader to a list, that position goes to the end of the file.
So at that point, when we iterate over it,
we are already at the end of the file.
That is why we cannot iterate this reader twice.

So let comment out line 5,
and run the program one more time. There we go. Now we have three rows,
each row is an array of strings.
-------------------code----------------------
with open("data.csv") as file:
    reader = csv.reader(file)
    # print(list(reader))

    for row in reader:
        print(row)
    # ['transaction_id', 'product_id', 'price']
    # ['1000', '1', '51']
    # ['1001', '2', '15']

-------------------code----------------------

- So as we see working with csv files
is pretty easy in python.
With these objects we can do some interesting things.
For example, let's say we have a directory
of a hundred or a thousand csv files.

- We can iterate this directory, open each csv file,
and remove the first row, which is the header row.
Or perhaps we want to combine these csv files into one file,
we can easily do that here.

- Another interesting thing we can do is
to summarize the value of these csv files.
Let's say we have 10 csv files,
and each csv file represents the transactions
for a given product.
With only a few lines of code,
we can read all these csv files,
and calculate the sum of sales for each product,
and then store the result in another csv file.
The possibilities are endless.

*** 7- Working with JSON Files ***
In this lecture we're going to learn how to work with json files in python.
- json stands for javascript object notation, and it's a popular
way to format data in a human readable way. These days
it's very important to know json, because a lot of popular websites like
facebook, twitter, yelp, youtube, and so on, provide their data
in json format. Also, if we have a website, we can provide our
data in json format.

- So, how to work with
json files. On the top, we import the json module.
-------------------code----------------------
import json
-------------------code----------------------

- Now let's create an array of movie objects.
So movies, we set it to an array. Each item in this array
is going to be a dictionary, because each movie object has properties like id,
title, year, and so on. So each movie object is essentially
a collection of key value pairs. 
-------------------code----------------------
movies = [
    {"id": 1, "title": "Terminator", "year": 1989},
    {"id": 2, "title": "Kindergarten Cop", "year": 1993}
]
-------------------code----------------------

- So here we have a movies object, now we can call json
dot dumps, pass this movies object here,
and get a string that includes our movies data formatted as json.
-------------------code----------------------
data = json. dumps(movies)
print(data)

# [{"id": 1, "title": "Terminator", "year": 1989},
# {"id": 2, "title": "Kindergarten Cop", "year": 1993}]
-------------------code----------------------

- So this is an example of json data.
Now in this case, what we see here
happens to be identical to the syntax that we use
to define an array of dictionaries in python. But this is not the case
when working with other languages.

- Now, back here, so we have this data variable which is a
simple string, now we can write it to a file. So on the top,
-------------------code----------------------
from pathlib import Path
-------------------code----------------------

- then instead of printing this
on the terminal, we're going to create a pass object,
let's say, movies dot json.
And then call, write
text on it, and pass this data string.
-------------------code----------------------
Path("movies.json").write_text(data)
-------------------code----------------------

- now here in our project folder we have, movies dot json,
beautiful.

- So we learn how to write data to a json file.

- Now let's imagine we get this json file from somewhere else, this could be the data
we get from facebook, twitter, imdb, yelp,
youtube, and so on. So we should be able to read this data in python.

- Back to app.py. we're going to delete this movies array,
as well as the line where we dump it to a json string.
So we start with this file, movies dot json,
and read all
its text, and store it in this variable.
-------------------code----------------------
data = Path("movies.json").read_text()
-------------------code----------------------

- So now data is a string that includes data formatted as json.
Next we need to parse this string into an array of objects.

**************************************************************
Parsing in IT refers to the process of analyzing a text or structured data according
to specific rules to convert it into a format that computers can understand and process.
**************************************************************

- So we call json dot loads past this string here,
and this will return an array of dictionaries.
-------------------code----------------------
movies = json.loads(data)
print(movies)
# [{'id': 1, 'title': 'Terminator', 'year': 1989},
#  {'id': 2, 'title': 'Kindergarten Cop', 'year': 1993}]
-------------------code----------------------

- So we can simply get any items in this array.
Here's the first movie, now we have a dictionary, using square brackets
we can get the value of any of these keys.
-------------------code----------------------
print(movies[0])
# {'id': 1, 'title': 'Terminator', 'year': 1989}
-------------------code----------------------

For example, let's get the title of the first movie
around the program, we get terminator. So this is all about
working with json files in python.
-------------------code----------------------
print(movies[0]["title"])
# Terminator
-------------------code----------------------

